Big O notation for beginner 

source : 
    https://hackernoon.com/big-o-for-beginners-622a64760e2
    https://medium.com/bee-solution-partners/penjelasan-sederhana-tentang-time-complexity-dan-big-o-notation-4337ba275cfe
    https://www.youtube.com/watch?v=__vX2sjlpXU

Use : measure the time and space complexity of the code 

O(1) : Constant time, the time is consistent for each execution. 
    Example : 
        const items = [0,1,2,3,4,5]

        const logFirstTwoItems = (items) => {
            console.log(items[0]); // O(1)
            console.log(items[1]); // O(1)
        }

        logFirstTwoItems(items); // O(2)
    
    No matter whether it is a O(1), O(2), etc, we round it down to O(1) which means 
    that our operation is a flat line in terms of scalability. 
    The number of time does not affect the execution time.


O(n): The notation is called O(n) if it runs for every value in the input. THe operation
    increase in a linear fashion according to the inputs (n).

O(n^2) : Example of this notation would be nested loop
    Example :
        const items = ['one', 'two', 'three', 'four', 'five'];

        logAllpairs = (items) => {
            for (let i = 0; i<items.length; i++){
                for (let j=0; j<items.length; j++){
                    console.log(items[i], items[j])
                }
            }
        }

        logAllpairs(items)

    This also known as quadratic time. Each time the input number increases, 
    the operation increases quadrratically.

O(log n): Logarithmic time, given an input of size n , the number of steps it takes 
          to accomplish the task are decreased by some factor with each step.
          Example : 
            let sortedArray = [11, 24, 30, 43, 51, 61, 73, 86];
            function isExists(number, array){
                var midPoint = Math.floor( array.length /2 );
                if( array[midPoint] === num) return true;
                let isFirstHalf = false;
                if( array[midPoint] < num ) isFirstHalf = true;
            
                else if( array[midpoint] > num ) isFirstHalf = false;
                if (array.length == 1) return false;
                else { 
                    if (isFirstHalf) 
                        return isExists(number, getFirstHalf(array));
                    else 
                        return isExists(number, getSecondHalf(array));
                }
            }

            isExists (24, sortedArray); // return true
            isExists (27, sortedArray); // return false

            Note : Recursive function usually modeled as O(log n)

Calculating Big O : 
    Determine Big O : 
    1. Identify your code 
    2. Identify N
    3. Count the steps in a typical run
    4. Keep the most significant part


    Example : 
        y = 5 + 20(72*28) // This is O(1)
        for x in range(0,n): // This is O(n)
            print(x)         

        total time = O(1) + O(n) = O(n)
        =====================================
        x = 5 + 99*7 // This is O(1)
        for x in range(0,n): // This is O(n)
            print(x)
        for x in range(0,n): // This is O(n^2)
            for x2 in range(0,n):
                print(x,x2)

        total time = O(n^2)

        ======================================
        if x>0 :
            //O(1)
        else if x < 0 :
            // O(log n)
        else :
            // O(n^2) 

        total time = O(n^2)

        =======================================

        moms = [
            ("Ted", "Jane"),
            ("Tom", "Sarah"),
            ("Bobby", "Elleanor"),
            .....
        ]

        def find_mom(moms, child):
            for child_name , mom_name in moms: //3*(N/2)
                if child == child_name :  //1*(N/2)
                    return mom_name //1
            return None

        We have a data strucutre called "moms" that is a list of tuple.
        We are going to searching through this list, some runs we will 
        find in the first entry and the other runs in the last entry.
        So the average of searching through the list is n/2. 

        In the loop, there are 3 steps: 
            1. Get the tuple out of the list
            2. Assign a child to a child_name
            3. Assign a mom to a mom_name 

            Whuch means this loop is contribute 3*(N/2) steps
        
        In the if condition, there are 1 step, that is to match the 
        child with the entire list within the loop. So this line 
        contributes 1*(N/2) steps

        Return mom_name will only happen once. So it is 1.

        So the total of the asymptotic complexity will be : 
        3*N/2 + 1*N/2 + 1 
        or 
        2N+1
        get rid of the constant resulting:
        2N
        which means this is an O(n) functions

        ================================================================

        def how_many_grandmothers(moms):
            grandmothers = 0 
            for child , mom in moms: // This is N or O(N)
                grandma = find_mom(moms, mom) // This is N or O(N) (?)
                if grandma: // This is N or O(N)
                    grandmothers += 1
            return grandmothers // This is 1

        Now, realize that find mom contains loop so that the find_mom function
        actually O(N^2). It is the highest. 

        So the complexity of this function is O(N^2)     


        


